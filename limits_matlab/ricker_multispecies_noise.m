function y= ricker_multispecies_noise

%%% Multi-species Ricker model (+noise)
%%% NB: Requires plotmatrix.m
%%% Author: Didier Gonze - update Sophie de Buyl (30 nov 2015)
%%% Created: 21/1/2015
%%% Updated: 20/5/2015

clear;
clc;

%%% To be set : 
changeci=false;% to add zeros to initial conditions
fromklemm=true;%true if interaction matrix to be picked up from the one generated with klemm-elg
geomdistr=false;%true if carrying capacities to be picked up from the one generated by geom.series 
rickerspar=false;%true if need to generate an interaction matrix
removetrans=true;

% ------------------------------------------------------
% Parameters
% ------------------------------------------------------

%%% Model parameters

N=100;       % number of species
sigma=0.05;   % level of noise

if fromklemm==true
        c=.05;
        clique=5;
        percneg=90;
        runnumber=1;
        
        namefile=strcat('/Users/sdebuyl/Dropbox/bio/dynamics_of_microbial_communities/klemm_matrices/klemm_',num2str(N),'_c_',num2str(c),'_clique_',num2str(5),'_percneg_',num2str(percneg),'_no_para_true',num2str(runnumber),'.txt');
    A=importdata(namefile);
end

if rickerspar==true
r=1;        % scale factor = max interaction strength (if r>2 => complex dynamics (oscillations, chaos), esp. if N large)
vd=-1;      % value on the diagonal
c=0.2;      % connectance (=1-sparsity)
A=2*(rand(N)-0.5);     % interaction matrix
S=rand(N)<c;          % sparsity matrix
A=r*A.*S;             % interaction matrix (sparse)
%A=zeros(N);          % no interactions (in this case, X tend to K)
A(logical(eye(size(A)))) = vd;   % values on the diagonals
end

[U,T]=schur(A,'complex');

rediag=real(diag(T));
imdiag=imag(diag(T));
indicesP=rediag>0;

listind=1:N;

for k=listind(indicesP)
T(k,k)=-real(T(k,k))+i*imag(T(k,k));
end

A=U*T*U';
max(max(imag(A)))
A=real(A);
%          %%%FRANZISKA DATA - take same initial condition
%          folder='/Users/sdebuyl/Dropbox/bio/dynamics_of_microbial_communities/matlab_files/SOC_Simulations';
%          fileName='SOI_1_adjacency_N100_c0.05_clique5_negedgeperc10_noparasites_1';
%          originalDirectory=pwd;
%          cd(folder);
%          ddd=importdata('SOI_1_adjacency_N100_c0.05_clique5_negedgeperc10_noparasites_1.csv');
%          cd(originalDirectory);
%          data=ddd.data;
%          %condinit=data(1,:)/100;


        




sA=size(A);
if N ~= sA(1)
   return
end



%%% Time parameters

if removetrans==true
    trans=100;         % transient time (=number of time points to skip in output)
else
    trans=0;
end

tend=300;          % final time (=number of time points to plot/save)



% ------------------------------------------------------
% Initial conditions & carrying capacities
% ------------------------------------------------------

if changeci==true
    folder='/Users/sdebuyl/Dropbox/bio/dynamics_of_microbial_communities/ricker_website';
    fileName='klemm20_A.txt';
    originalDirectory=pwd;
    cd(folder);
    ddd=importdata('klemm20_A.txt');
    oldts=importdata('klemm20_ts_estim.txt');
    cd(originalDirectory);
    A=ddd;
    sA=size(A);
    N=sA(1);   
end



if geomdistr==true
    Ktemp=importdata('carryingcap20.txt');
    K=Ktemp';
    K=K/max(K);
else
    K=rand(N,1)   
end

x=rand(N,1);         % initial abundance

if changeci==true
    
    x=oldts(1,:)';
    temp=randperm(N);
    selection=temp(1:8);
    x(selection)=0;
end


% ------------------------------------------------------
% Matrix properties
% ------------------------------------------------------


eigenvalA=eig(A);
if max(real(eigenvalA))>=0
    fprintf('linear unstable interaction matrix')
    
end
    

A0=length(find(A==0));
Ap=length(find(A>0));
An=length(find(A<0))-N;   % terms on the diagonal are discarded

Atot=A0+Ap+(An-N)+N;

fprintf('Number of non-nul interaction = %g \n',A0)
fprintf('Number of positive interactions = %g (%g %%) \n',Ap,100*Ap/(Ap+An))
fprintf('Number of negative interactions = %g (%g %%) \n',An,100*An/(Ap+An))
fprintf('Connectance = %g \n\n', 1-A0/Atot)



% ------------------------------------------------------
% Run simulation
% ------------------------------------------------------

R=[0 x'];  % results

error=0;     % check if explosion (error=1) or negative value (error=2)
xbound=10^4; % if x > xbound => explosion => error=1

if trans>0
    for t=1:trans
        b=lognrnd(0,sigma,[N,1]);   % noise
        x=b.*x.*exp(A*(x-K));
        if x>xbound
            error=1;
            break;
        elseif x<0
            error=2;
            break;
        end
    end
    t=0;
    R=[t x'];
end

if error==0
    for t=1:tend
        b=lognrnd(0,sigma,[N,1]);   % noise
        x=b.*x.*exp(A*(x-K));
        if (max(x)>xbound) | (max(isnan(x))==1)
            error=1;
           break;
        elseif x<0
            error=2;
            break;
        else
        R=[R; t x'];
        end
    end
end


if error==1
fprintf('ERROR: x > xbound !!! \n\n')

elseif error==2
fprintf('ERROR: x < 0 !!! \n\n')

end



% ------------------------------------------------------
% Save data
% ------------------------------------------------------

save carcap.txt K -ASCII
save matrix.txt A -ASCII
save data.txt R -ASCII


% ------------------------------------------------------
% Figures
% ------------------------------------------------------

figure(1)
clf
plot(R(:,1),R(:,2:N+1))
xlabel('Time','fontsize',16)
ylabel('X_i','fontsize',16)

saveas(gca,'figure.jpg','jpg');


figure(2)
clf
plotmatrix(A)
axis square
xlabel('Species, i','fontsize',16)
ylabel('Species, j','fontsize',16)

saveas(gca,'matrix.jpg','jpg');




% ------------------------------------------------------
% Statistics
% ------------------------------------------------------

if error==0

%%% Maximum value reached during the time evolution

mm=max(R(:,2:end));
mmax=max(mm);
kmax=find(mm==mmax);

fprintf('Max value = %g (reached by species %g) \n',mmax,kmax)


%%% Number of alive/dead species

k0=find(R(end,2:end)==0);   % index of the dead species
n0=length(k0); % number of dead species

fprintf('Number of species still alive at t_end = %g \n',N-n0)
fprintf('Number of species dead at t_end = %g \n \n',n0)
fprintf('size of A %g \n',sA(1))

end

y=A;

